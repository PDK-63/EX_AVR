
Led7thanh_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000240  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000080a  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000647  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f4  00000000  00000000  000011c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000014bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038b  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000502  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  8a:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z8hien_thij>:
#include <avr/delay.h>
int dem = 0;
char maled[] ={0xc0,0xf9,0x00a4,0xb0,0x99,
				0x92,0x82,0xf8,0x80,0x90};
int i;		
void hien_thi(unsigned int x){
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ac 01       	movw	r20, r24
	uint16_t tmp, ch, hn, ht, hc, hdv;
	tmp = x;
	hn = tmp / 1000;
	ht = (tmp % 1000) / 100;
  9c:	8c 01       	movw	r16, r24
  9e:	16 95       	lsr	r17
  a0:	07 95       	ror	r16
  a2:	16 95       	lsr	r17
  a4:	07 95       	ror	r16
  a6:	16 95       	lsr	r17
  a8:	07 95       	ror	r16
  aa:	98 01       	movw	r18, r16
  ac:	a5 ec       	ldi	r26, 0xC5	; 197
  ae:	b0 e2       	ldi	r27, 0x20	; 32
  b0:	0e 94 0f 01 	call	0x21e	; 0x21e <__umulhisi3>
  b4:	fc 01       	movw	r30, r24
  b6:	f2 95       	swap	r31
  b8:	e2 95       	swap	r30
  ba:	ef 70       	andi	r30, 0x0F	; 15
  bc:	ef 27       	eor	r30, r31
  be:	ff 70       	andi	r31, 0x0F	; 15
  c0:	ef 27       	eor	r30, r31
  c2:	28 ee       	ldi	r18, 0xE8	; 232
  c4:	33 e0       	ldi	r19, 0x03	; 3
  c6:	e2 9f       	mul	r30, r18
  c8:	c0 01       	movw	r24, r0
  ca:	e3 9f       	mul	r30, r19
  cc:	90 0d       	add	r25, r0
  ce:	f2 9f       	mul	r31, r18
  d0:	90 0d       	add	r25, r0
  d2:	11 24       	eor	r1, r1
  d4:	fa 01       	movw	r30, r20
  d6:	e8 1b       	sub	r30, r24
  d8:	f9 0b       	sbc	r31, r25
	hc = (tmp % 1000 % 100) / 10;
  da:	ef 01       	movw	r28, r30
  dc:	d6 95       	lsr	r29
  de:	c7 95       	ror	r28
  e0:	d6 95       	lsr	r29
  e2:	c7 95       	ror	r28
  e4:	9e 01       	movw	r18, r28
  e6:	ab e7       	ldi	r26, 0x7B	; 123
  e8:	b4 e1       	ldi	r27, 0x14	; 20
  ea:	0e 94 0f 01 	call	0x21e	; 0x21e <__umulhisi3>
  ee:	ac 01       	movw	r20, r24
  f0:	56 95       	lsr	r21
  f2:	47 95       	ror	r20
  f4:	24 e6       	ldi	r18, 0x64	; 100
  f6:	24 9f       	mul	r18, r20
  f8:	c0 01       	movw	r24, r0
  fa:	25 9f       	mul	r18, r21
  fc:	90 0d       	add	r25, r0
  fe:	11 24       	eor	r1, r1
 100:	af 01       	movw	r20, r30
 102:	48 1b       	sub	r20, r24
 104:	59 0b       	sbc	r21, r25
	hdv = (tmp % 1000 % 100 % 10);
	 
	 // Hien thi hang nghin
	 PORTD = 0X00;
 106:	12 ba       	out	0x12, r1	; 18
	 PORTD = 0x00000001;		// chan D0  muc cao
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	82 bb       	out	0x12, r24	; 18
	 PORTC = maled[hn];
 10c:	98 01       	movw	r18, r16
 10e:	a5 ec       	ldi	r26, 0xC5	; 197
 110:	b0 e2       	ldi	r27, 0x20	; 32
 112:	0e 94 0f 01 	call	0x21e	; 0x21e <__umulhisi3>
 116:	92 95       	swap	r25
 118:	82 95       	swap	r24
 11a:	8f 70       	andi	r24, 0x0F	; 15
 11c:	89 27       	eor	r24, r25
 11e:	9f 70       	andi	r25, 0x0F	; 15
 120:	89 27       	eor	r24, r25
 122:	fc 01       	movw	r30, r24
 124:	e0 5a       	subi	r30, 0xA0	; 160
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	8f e9       	ldi	r24, 0x9F	; 159
 12e:	9f e0       	ldi	r25, 0x0F	; 15
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <_Z8hien_thij+0x9e>
 134:	00 c0       	rjmp	.+0      	; 0x136 <_Z8hien_thij+0xa4>
 136:	00 00       	nop
	 _delay_ms(1);
	 
	 // Hien thi hang tram
	 PORTD = 0X00;
 138:	12 ba       	out	0x12, r1	; 18
	 PORTD = 0b00000010;		// chan D0  muc cao
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	82 bb       	out	0x12, r24	; 18
	 PORTC = maled[ht];
 13e:	9e 01       	movw	r18, r28
 140:	ab e7       	ldi	r26, 0x7B	; 123
 142:	b4 e1       	ldi	r27, 0x14	; 20
 144:	0e 94 0f 01 	call	0x21e	; 0x21e <__umulhisi3>
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	fc 01       	movw	r30, r24
 14e:	e0 5a       	subi	r30, 0xA0	; 160
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 81       	ld	r24, Z
 154:	85 bb       	out	0x15, r24	; 21
 156:	ef e9       	ldi	r30, 0x9F	; 159
 158:	ff e0       	ldi	r31, 0x0F	; 15
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <_Z8hien_thij+0xc8>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_Z8hien_thij+0xce>
 160:	00 00       	nop
	 _delay_ms(1);
	 
	 // Hien thi hang chuc
	 PORTD = 0X00;
 162:	12 ba       	out	0x12, r1	; 18
	 PORTD = 0b00000100;	// chan D0  muc cao
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	82 bb       	out	0x12, r24	; 18
	 PORTC = maled[hc];
 168:	9a 01       	movw	r18, r20
 16a:	ad ec       	ldi	r26, 0xCD	; 205
 16c:	bc ec       	ldi	r27, 0xCC	; 204
 16e:	0e 94 0f 01 	call	0x21e	; 0x21e <__umulhisi3>
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	fc 01       	movw	r30, r24
 180:	e0 5a       	subi	r30, 0xA0	; 160
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	20 81       	ld	r18, Z
 186:	25 bb       	out	0x15, r18	; 21
 188:	ef e9       	ldi	r30, 0x9F	; 159
 18a:	ff e0       	ldi	r31, 0x0F	; 15
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <_Z8hien_thij+0xfa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <_Z8hien_thij+0x100>
 192:	00 00       	nop
	 _delay_ms(1);
	 
	 // Hien thi hang don vi
	 PORTD = 0X00;
 194:	12 ba       	out	0x12, r1	; 18
	 PORTD = 0b00001000;		// chan D0  muc cao
 196:	28 e0       	ldi	r18, 0x08	; 8
 198:	22 bb       	out	0x12, r18	; 18
	 PORTC = maled[hdv];
 19a:	9c 01       	movw	r18, r24
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	48 1b       	sub	r20, r24
 1b2:	59 0b       	sbc	r21, r25
 1b4:	fa 01       	movw	r30, r20
 1b6:	e0 5a       	subi	r30, 0xA0	; 160
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	80 81       	ld	r24, Z
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	9f e0       	ldi	r25, 0x0F	; 15
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <_Z8hien_thij+0x130>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <_Z8hien_thij+0x136>
 1c8:	00 00       	nop
	 _delay_ms(1);
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <main>:

int main(void)
{
    /* Replace with your application code */
	DDRC = 0xff;		// cau hinh PORTC chan Output
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	84 bb       	out	0x14, r24	; 20
	DDRD = (1 << PIND0) | (1 << PIND1);		//	DDRD = 0b00000011;
 1d8:	93 e0       	ldi	r25, 0x03	; 3
 1da:	91 bb       	out	0x11, r25	; 17
	PORTC = 0xff;
 1dc:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x00;
 1de:	12 ba       	out	0x12, r1	; 18
    while (1) 
    {
		for( i = 0; i < 1000; i++){
 1e0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x1>
 1e4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	90 e0       	ldi	r25, 0x00	; 0
			hien_thi(i);
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <_Z8hien_thij>
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	81 ee       	ldi	r24, 0xE1	; 225
 1f4:	94 e0       	ldi	r25, 0x04	; 4
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x22>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x2c>
 200:	00 00       	nop
	DDRD = (1 << PIND0) | (1 << PIND1);		//	DDRD = 0b00000011;
	PORTC = 0xff;
	PORTD = 0x00;
    while (1) 
    {
		for( i = 0; i < 1000; i++){
 202:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 206:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 210:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 214:	88 3e       	cpi	r24, 0xE8	; 232
 216:	23 e0       	ldi	r18, 0x03	; 3
 218:	92 07       	cpc	r25, r18
 21a:	14 f7       	brge	.-60     	; 0x1e0 <main+0xc>
 21c:	e7 cf       	rjmp	.-50     	; 0x1ec <main+0x18>

0000021e <__umulhisi3>:
 21e:	a2 9f       	mul	r26, r18
 220:	b0 01       	movw	r22, r0
 222:	b3 9f       	mul	r27, r19
 224:	c0 01       	movw	r24, r0
 226:	a3 9f       	mul	r26, r19
 228:	70 0d       	add	r23, r0
 22a:	81 1d       	adc	r24, r1
 22c:	11 24       	eor	r1, r1
 22e:	91 1d       	adc	r25, r1
 230:	b2 9f       	mul	r27, r18
 232:	70 0d       	add	r23, r0
 234:	81 1d       	adc	r24, r1
 236:	11 24       	eor	r1, r1
 238:	91 1d       	adc	r25, r1
 23a:	08 95       	ret

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
