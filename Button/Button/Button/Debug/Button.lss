
Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000144  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005bc  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053f  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000198  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000314  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define sbi(port, bit) port |= (1 << (bit));		// Xet bit tu 0 len 1

int cnt = 0;
int main(void)
{
    DDRA = 0xFF;		// Cau hinh PORTA la output
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  80:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0x00;		// Cau hinh PORTB la Input  
  82:	17 ba       	out	0x17, r1	; 23
    PORTB = 0x01;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	88 bb       	out	0x18, r24	; 24
    {
		if((PINB & (1 << PINB0)) == 0){
			while((PINB & (1 << PINB0)) == 0);
			cnt++;
			if(cnt < 9){
				sbi(PORTA, cnt-1);		// dua bit 0 len 1
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	50 e0       	ldi	r21, 0x00	; 0
	PORTA = 0x00;
	DDRB = 0x00;		// Cau hinh PORTB la Input  
    PORTB = 0x01;
	while (1) 
    {
		if((PINB & (1 << PINB0)) == 0){
  8c:	b0 99       	sbic	0x16, 0	; 22
  8e:	fe cf       	rjmp	.-4      	; 0x8c <main+0x10>
			while((PINB & (1 << PINB0)) == 0);
  90:	b0 9b       	sbis	0x16, 0	; 22
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x14>
			cnt++;
  94:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  98:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9c:	c9 01       	movw	r24, r18
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if(cnt < 9){
  a8:	09 97       	sbiw	r24, 0x09	; 9
  aa:	54 f4       	brge	.+20     	; 0xc0 <main+0x44>
				sbi(PORTA, cnt-1);		// dua bit 0 len 1
  ac:	3b b3       	in	r19, 0x1b	; 27
  ae:	ca 01       	movw	r24, r20
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x3a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	2a 95       	dec	r18
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <main+0x36>
  ba:	83 2b       	or	r24, r19
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	e6 cf       	rjmp	.-52     	; 0x8c <main+0x10>
			}
			else{
				cnt = 0;
  c0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				PORTA = 0x00;
  c8:	1b ba       	out	0x1b, r1	; 27
  ca:	e0 cf       	rjmp	.-64     	; 0x8c <main+0x10>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
