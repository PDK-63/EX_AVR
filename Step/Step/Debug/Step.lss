
Step.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e6  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000602  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000356  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039a  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	int period;
	DDRB = 0x0F;		/* Make PORTD lower pins as output */
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	87 bb       	out	0x17, r24	; 23
	{
		/* Rotate Stepper Motor clockwise with Half step sequence */
		for(int i=0;i<12;i++)
		{
			
			PORTB = 0x06;
  70:	36 e0       	ldi	r19, 0x06	; 6
			_delay_ms(period);
			PORTB = 0x02;
  72:	72 e0       	ldi	r23, 0x02	; 2
			_delay_ms(period);
			PORTB = 0x03;
  74:	23 e0       	ldi	r18, 0x03	; 3
			_delay_ms(period);
			PORTB = 0x01;
  76:	61 e0       	ldi	r22, 0x01	; 1
			_delay_ms(period);
		}
		PORTB = 0x09;		/* Last step to initial position */
  78:	49 e0       	ldi	r20, 0x09	; 9
			_delay_ms(period);
			PORTB = 0x03;
			_delay_ms(period);
			PORTB = 0x06;
			_delay_ms(period);
			PORTB = 0x0C;
  7a:	5c e0       	ldi	r21, 0x0C	; 12
#include <avr/io.h>			/* Include AVR std. library file */
#include <util/delay.h>		/* Include delay header file */


int main(void)
{
  7c:	8c e0       	ldi	r24, 0x0C	; 12
  7e:	90 e0       	ldi	r25, 0x00	; 0
	{
		/* Rotate Stepper Motor clockwise with Half step sequence */
		for(int i=0;i<12;i++)
		{
			
			PORTB = 0x06;
  80:	38 bb       	out	0x18, r19	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	af ef       	ldi	r26, 0xFF	; 255
  84:	e0 e7       	ldi	r30, 0x70	; 112
  86:	f2 e0       	ldi	r31, 0x02	; 2
  88:	a1 50       	subi	r26, 0x01	; 1
  8a:	e0 40       	sbci	r30, 0x00	; 0
  8c:	f0 40       	sbci	r31, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x02;
  94:	78 bb       	out	0x18, r23	; 24
  96:	af ef       	ldi	r26, 0xFF	; 255
  98:	e0 e7       	ldi	r30, 0x70	; 112
  9a:	f2 e0       	ldi	r31, 0x02	; 2
  9c:	a1 50       	subi	r26, 0x01	; 1
  9e:	e0 40       	sbci	r30, 0x00	; 0
  a0:	f0 40       	sbci	r31, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x03;
  a8:	28 bb       	out	0x18, r18	; 24
  aa:	af ef       	ldi	r26, 0xFF	; 255
  ac:	e0 e7       	ldi	r30, 0x70	; 112
  ae:	f2 e0       	ldi	r31, 0x02	; 2
  b0:	a1 50       	subi	r26, 0x01	; 1
  b2:	e0 40       	sbci	r30, 0x00	; 0
  b4:	f0 40       	sbci	r31, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x01;
  bc:	68 bb       	out	0x18, r22	; 24
  be:	af ef       	ldi	r26, 0xFF	; 255
  c0:	e0 e7       	ldi	r30, 0x70	; 112
  c2:	f2 e0       	ldi	r31, 0x02	; 2
  c4:	a1 50       	subi	r26, 0x01	; 1
  c6:	e0 40       	sbci	r30, 0x00	; 0
  c8:	f0 40       	sbci	r31, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
  d0:	01 97       	sbiw	r24, 0x01	; 1
	DDRB = 0x0F;		/* Make PORTD lower pins as output */
	period = 100;		/* Set period in between two steps */
	while (1)
	{
		/* Rotate Stepper Motor clockwise with Half step sequence */
		for(int i=0;i<12;i++)
  d2:	b1 f6       	brne	.-84     	; 0x80 <main+0x14>
			PORTB = 0x03;
			_delay_ms(period);
			PORTB = 0x01;
			_delay_ms(period);
		}
		PORTB = 0x09;		/* Last step to initial position */
  d4:	48 bb       	out	0x18, r20	; 24
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	90 e7       	ldi	r25, 0x70	; 112
  da:	a2 e0       	ldi	r26, 0x02	; 2
  dc:	81 50       	subi	r24, 0x01	; 1
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	a0 40       	sbci	r26, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x70>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x7a>
  e6:	00 00       	nop
  e8:	ef ef       	ldi	r30, 0xFF	; 255
  ea:	f9 e6       	ldi	r31, 0x69	; 105
  ec:	88 e1       	ldi	r24, 0x18	; 24
  ee:	e1 50       	subi	r30, 0x01	; 1
  f0:	f0 40       	sbci	r31, 0x00	; 0
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x82>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x8c>
  f8:	00 00       	nop
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);

		/* Rotate Stepper Motor Anticlockwise with Full step sequence */
		for(int i=0;i<12;i++)
		{
			PORTB = 0x09;
  fe:	48 bb       	out	0x18, r20	; 24
 100:	af ef       	ldi	r26, 0xFF	; 255
 102:	e0 e7       	ldi	r30, 0x70	; 112
 104:	f2 e0       	ldi	r31, 0x02	; 2
 106:	a1 50       	subi	r26, 0x01	; 1
 108:	e0 40       	sbci	r30, 0x00	; 0
 10a:	f0 40       	sbci	r31, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x9a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0xa4>
 110:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x03;
 112:	28 bb       	out	0x18, r18	; 24
 114:	af ef       	ldi	r26, 0xFF	; 255
 116:	e0 e7       	ldi	r30, 0x70	; 112
 118:	f2 e0       	ldi	r31, 0x02	; 2
 11a:	a1 50       	subi	r26, 0x01	; 1
 11c:	e0 40       	sbci	r30, 0x00	; 0
 11e:	f0 40       	sbci	r31, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0xae>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xb8>
 124:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x06;
 126:	38 bb       	out	0x18, r19	; 24
 128:	af ef       	ldi	r26, 0xFF	; 255
 12a:	e0 e7       	ldi	r30, 0x70	; 112
 12c:	f2 e0       	ldi	r31, 0x02	; 2
 12e:	a1 50       	subi	r26, 0x01	; 1
 130:	e0 40       	sbci	r30, 0x00	; 0
 132:	f0 40       	sbci	r31, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0xc2>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xcc>
 138:	00 00       	nop
			_delay_ms(period);
			PORTB = 0x0C;
 13a:	58 bb       	out	0x18, r21	; 24
 13c:	af ef       	ldi	r26, 0xFF	; 255
 13e:	e0 e7       	ldi	r30, 0x70	; 112
 140:	f2 e0       	ldi	r31, 0x02	; 2
 142:	a1 50       	subi	r26, 0x01	; 1
 144:	e0 40       	sbci	r30, 0x00	; 0
 146:	f0 40       	sbci	r31, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0xd6>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xe0>
 14c:	00 00       	nop
 14e:	01 97       	sbiw	r24, 0x01	; 1
		PORTB = 0x09;		/* Last step to initial position */
		_delay_ms(period);
		_delay_ms(1000);

		/* Rotate Stepper Motor Anticlockwise with Full step sequence */
		for(int i=0;i<12;i++)
 150:	b1 f6       	brne	.-84     	; 0xfe <main+0x92>
			PORTB = 0x06;
			_delay_ms(period);
			PORTB = 0x0C;
			_delay_ms(period);
		}
		PORTB = 0x09;
 152:	48 bb       	out	0x18, r20	; 24
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	90 e7       	ldi	r25, 0x70	; 112
 158:	a2 e0       	ldi	r26, 0x02	; 2
 15a:	81 50       	subi	r24, 0x01	; 1
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	a0 40       	sbci	r26, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0xee>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0xf8>
 164:	00 00       	nop
 166:	ef ef       	ldi	r30, 0xFF	; 255
 168:	f9 e6       	ldi	r31, 0x69	; 105
 16a:	88 e1       	ldi	r24, 0x18	; 24
 16c:	e1 50       	subi	r30, 0x01	; 1
 16e:	f0 40       	sbci	r31, 0x00	; 0
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x100>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x10a>
 176:	00 00       	nop
 178:	81 cf       	rjmp	.-254    	; 0x7c <main+0x10>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
