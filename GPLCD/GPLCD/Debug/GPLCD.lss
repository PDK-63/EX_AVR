
GPLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f2  00800060  000006ec  00000760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5d  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d5  00000000  00000000  00001465  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000486  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042a  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ad  00000000  00000000  000024ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 35       	cpi	r26, 0x52	; 82
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 34 02 	call	0x468	; 0x468 <main>
  7a:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z12GLCD_Commandc>:
	,{0x78, 0x46, 0x41, 0x46, 0x78} // 7f <-
};

void GLCD_Command(char Command)	
{
	Data_Port = Command;		
  82:	8b bb       	out	0x1b, r24	; 27
	Command_Port &= ~(1 << RS);	
  84:	a8 98       	cbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);	
  86:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);	
  88:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	8a 95       	dec	r24
  8e:	f1 f7       	brne	.-4      	; 0x8c <_Z12GLCD_Commandc+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_Z12GLCD_Commandc+0x10>
	_delay_us(5);
	Command_Port &= ~(1 << EN);
  92:	aa 98       	cbi	0x15, 2	; 21
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	8a 95       	dec	r24
  98:	f1 f7       	brne	.-4      	; 0x96 <_Z12GLCD_Commandc+0x14>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_Z12GLCD_Commandc+0x1a>
  9c:	08 95       	ret

0000009e <_Z9GLCD_Datac>:
	_delay_us(5);
}

void GLCD_Data(char Data)		
{
	Data_Port = Data;		
  9e:	8b bb       	out	0x1b, r24	; 27
	Command_Port |=  (1 << RS);	
  a0:	a8 9a       	sbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);	
  a2:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);	
  a4:	aa 9a       	sbi	0x15, 2	; 21
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <_Z9GLCD_Datac+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_Z9GLCD_Datac+0x10>
	_delay_us(5);
	Command_Port &= ~(1 << EN);
  ae:	aa 98       	cbi	0x15, 2	; 21
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <_Z9GLCD_Datac+0x14>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_Z9GLCD_Datac+0x1a>
  b8:	08 95       	ret

000000ba <_Z9GLCD_Initv>:
	_delay_us(5);
}

void GLCD_Init()		
{
	Data_Port_Dir = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a bb       	out	0x1a, r24	; 26
	Command_Port_Dir = 0xFF;
  be:	84 bb       	out	0x14, r24	; 20
	
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	88 63       	ori	r24, 0x38	; 56
  c4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	9f e1       	ldi	r25, 0x1F	; 31
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <_Z9GLCD_Initv+0x10>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_Z9GLCD_Initv+0x16>
  d0:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);		
  d2:	8e e3       	ldi	r24, 0x3E	; 62
  d4:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
	GLCD_Command(0x40);		
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
	GLCD_Command(0xB8);		
  de:	88 eb       	ldi	r24, 0xB8	; 184
  e0:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
	GLCD_Command(0xC0);		
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
	GLCD_Command(0x3F);		
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
  f0:	08 95       	ret

000000f2 <_Z13GLCD_ClearAllv>:
}

void GLCD_ClearAll()			
{
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
	int i,j;

	Command_Port |= (1 << CS1) | (1 << CS2);
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	88 61       	ori	r24, 0x18	; 24
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	18 eb       	ldi	r17, 0xB8	; 184
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);
 100:	81 2f       	mov	r24, r17
 102:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
 106:	c0 e4       	ldi	r28, 0x40	; 64
 108:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z9GLCD_Datac>
 110:	21 97       	sbiw	r28, 0x01	; 1

	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);
		for(j = 0; j < 64; j++)
 112:	d9 f7       	brne	.-10     	; 0x10a <_Z13GLCD_ClearAllv+0x18>
 114:	1f 5f       	subi	r17, 0xFF	; 255
void GLCD_ClearAll()			
{
	int i,j;

	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
 116:	10 3c       	cpi	r17, 0xC0	; 192
 118:	99 f7       	brne	.-26     	; 0x100 <_Z13GLCD_ClearAllv+0xe>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	
		}
	}
	GLCD_Command(0x40);	
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
	GLCD_Command(0xB8);		
 120:	88 eb       	ldi	r24, 0xB8	; 184
 122:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <_Z11GLCD_StringcPc>:

void GLCD_String(char page_no, char *str)
{
 12e:	2f 92       	push	r2
 130:	3f 92       	push	r3
 132:	4f 92       	push	r4
 134:	5f 92       	push	r5
 136:	6f 92       	push	r6
 138:	7f 92       	push	r7
 13a:	8f 92       	push	r8
 13c:	9f 92       	push	r9
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <_Z11GLCD_StringcPc+0x26>
 154:	00 d0       	rcall	.+0      	; 0x156 <_Z11GLCD_StringcPc+0x28>
 156:	00 d0       	rcall	.+0      	; 0x158 <_Z11GLCD_StringcPc+0x2a>
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	8b 01       	movw	r16, r22
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
 15e:	e8 2e       	mov	r14, r24
 160:	f1 2c       	mov	r15, r1
 162:	c7 01       	movw	r24, r14
 164:	88 54       	subi	r24, 0x48	; 72
 166:	9f 4f       	sbci	r25, 0xFF	; 255
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	89 83       	std	Y+1, r24	; 0x01
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
	
	Command_Port |= (1 << CS1);	
 16c:	ab 9a       	sbi	0x15, 3	; 21
	Command_Port &= ~(1 << CS2);
 16e:	ac 98       	cbi	0x15, 4	; 21
	
	GLCD_Command(Page);
 170:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
	for(i = 0; str[i] != 0; i++)	
 174:	f8 01       	movw	r30, r16
 176:	90 81       	ld	r25, Z
 178:	99 23       	and	r25, r25
 17a:	09 f4       	brne	.+2      	; 0x17e <_Z11GLCD_StringcPc+0x50>
 17c:	59 c1       	rjmp	.+690    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
 17e:	22 24       	eor	r2, r2
 180:	33 24       	eor	r3, r3
 182:	2e 18       	sub	r2, r14
 184:	3f 08       	sbc	r3, r15
 186:	36 94       	lsr	r3
 188:	32 2c       	mov	r3, r2
 18a:	22 24       	eor	r2, r2
 18c:	37 94       	ror	r3
 18e:	27 94       	ror	r2
 190:	f5 e0       	ldi	r31, 0x05	; 5
 192:	2f 1a       	sub	r2, r31
 194:	fc ef       	ldi	r31, 0xFC	; 252
 196:	3f 0a       	sbc	r3, r31
void GLCD_String(char page_no, char *str)
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
 198:	61 2c       	mov	r6, r1
 19a:	51 2c       	mov	r5, r1
 19c:	41 2c       	mov	r4, r1
 19e:	0f 2e       	mov	r0, r31
 1a0:	ff e3       	ldi	r31, 0x3F	; 63
 1a2:	7f 2e       	mov	r7, r31
 1a4:	f0 2d       	mov	r31, r0

void GLCD_String(char page_no, char *str)
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
 1a6:	e1 2c       	mov	r14, r1
 1a8:	f1 2c       	mov	r15, r1
					break;
					GLCD_Command(0x40);
					Y_address = Y_address + column;
					Command_Port ^= (1 << CS1);
					Command_Port ^= (1 << CS2);
					GLCD_Command(Page + Page_inc);
 1aa:	49 81       	ldd	r20, Y+1	; 0x01
 1ac:	5a 81       	ldd	r21, Y+2	; 0x02
 1ae:	9a 01       	movw	r18, r20
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	29 83       	std	Y+1, r18	; 0x01
 1b6:	3a 83       	std	Y+2, r19	; 0x02
 1b8:	4b 83       	std	Y+3, r20	; 0x03
 1ba:	5c 83       	std	Y+4, r21	; 0x04
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_Z11GLCD_StringcPc+0x98>
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
 1be:	2e 14       	cp	r2, r14
 1c0:	3f 04       	cpc	r3, r15
 1c2:	08 f4       	brcc	.+2      	; 0x1c6 <_Z11GLCD_StringcPc+0x98>
 1c4:	35 c1       	rjmp	.+618    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		if (str[i]!=32)
 1c6:	90 32       	cpi	r25, 0x20	; 32
 1c8:	09 f4       	brne	.+2      	; 0x1cc <_Z11GLCD_StringcPc+0x9e>
 1ca:	4f c0       	rjmp	.+158    	; 0x26a <_Z11GLCD_StringcPc+0x13c>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9e 83       	std	Y+6, r25	; 0x06
 1d2:	8d 83       	std	Y+5, r24	; 0x05
		{
			for (column=1; column<=FontWidth; column++)
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
 1d4:	cd 80       	ldd	r12, Y+5	; 0x05
 1d6:	de 80       	ldd	r13, Y+6	; 0x06
 1d8:	ce 0c       	add	r12, r14
 1da:	df 1c       	adc	r13, r15
 1dc:	20 e0       	ldi	r18, 0x00	; 0
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	5f e3       	ldi	r21, 0x3F	; 63
 1e4:	66 2d       	mov	r22, r6
 1e6:	75 2d       	mov	r23, r5
 1e8:	84 2d       	mov	r24, r4
 1ea:	97 2d       	mov	r25, r7
 1ec:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3>
 1f0:	a6 2e       	mov	r10, r22
 1f2:	b7 2e       	mov	r11, r23
 1f4:	98 2e       	mov	r9, r24
 1f6:	89 2e       	mov	r8, r25
 1f8:	0e 94 b0 02 	call	0x560	; 0x560 <__fixsfsi>
 1fc:	76 95       	lsr	r23
 1fe:	76 2f       	mov	r23, r22
 200:	66 27       	eor	r22, r22
 202:	77 95       	ror	r23
 204:	67 95       	ror	r22
 206:	c6 16       	cp	r12, r22
 208:	d7 06       	cpc	r13, r23
 20a:	29 f5       	brne	.+74     	; 0x256 <_Z11GLCD_StringcPc+0x128>
				{
					if (column == FontWidth)
 20c:	ed 81       	ldd	r30, Y+5	; 0x05
 20e:	fe 81       	ldd	r31, Y+6	; 0x06
 210:	35 97       	sbiw	r30, 0x05	; 5
 212:	59 f1       	breq	.+86     	; 0x26a <_Z11GLCD_StringcPc+0x13c>
					break;
					GLCD_Command(0x40);
 214:	80 e4       	ldi	r24, 0x40	; 64
 216:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
					Y_address = Y_address + column;
					Command_Port ^= (1 << CS1);
 21a:	85 b3       	in	r24, 0x15	; 21
 21c:	f8 e0       	ldi	r31, 0x08	; 8
 21e:	8f 27       	eor	r24, r31
 220:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 222:	85 b3       	in	r24, 0x15	; 21
 224:	20 e1       	ldi	r18, 0x10	; 16
 226:	82 27       	eor	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
					GLCD_Command(Page + Page_inc);
 22a:	69 81       	ldd	r22, Y+1	; 0x01
 22c:	7a 81       	ldd	r23, Y+2	; 0x02
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	9c 81       	ldd	r25, Y+4	; 0x04
 232:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__floatunsisf>
 236:	26 2d       	mov	r18, r6
 238:	35 2d       	mov	r19, r5
 23a:	44 2d       	mov	r20, r4
 23c:	57 2d       	mov	r21, r7
 23e:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3>
 242:	0e 94 b7 02 	call	0x56e	; 0x56e <__fixunssfsi>
 246:	86 2f       	mov	r24, r22
 248:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
					Page_inc = Page_inc + 0.5;
 24c:	6a 2c       	mov	r6, r10
 24e:	5b 2c       	mov	r5, r11
 250:	49 2c       	mov	r4, r9
 252:	78 2c       	mov	r7, r8
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
				{
					if (column == FontWidth)
					break;
					GLCD_Command(0x40);
					Y_address = Y_address + column;
 254:	76 01       	movw	r14, r12
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
 256:	4d 81       	ldd	r20, Y+5	; 0x05
 258:	5e 81       	ldd	r21, Y+6	; 0x06
 25a:	4f 5f       	subi	r20, 0xFF	; 255
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	5e 83       	std	Y+6, r21	; 0x06
 260:	4d 83       	std	Y+5, r20	; 0x05
 262:	46 30       	cpi	r20, 0x06	; 6
 264:	51 05       	cpc	r21, r1
 266:	09 f0       	breq	.+2      	; 0x26a <_Z11GLCD_StringcPc+0x13c>
 268:	b5 cf       	rjmp	.-150    	; 0x1d4 <_Z11GLCD_StringcPc+0xa6>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
 26a:	2e 14       	cp	r2, r14
 26c:	3f 04       	cpc	r3, r15
 26e:	08 f4       	brcc	.+2      	; 0x272 <_Z11GLCD_StringcPc+0x144>
 270:	df c0       	rjmp	.+446    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
 272:	f8 01       	movw	r30, r16
 274:	80 81       	ld	r24, Z
 276:	80 32       	cpi	r24, 0x20	; 32
 278:	09 f0       	breq	.+2      	; 0x27c <_Z11GLCD_StringcPc+0x14e>
 27a:	53 c0       	rjmp	.+166    	; 0x322 <_Z11GLCD_StringcPc+0x1f4>
 27c:	67 01       	movw	r12, r14
 27e:	1e 82       	std	Y+6, r1	; 0x06
 280:	1d 82       	std	Y+5, r1	; 0x05
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
 282:	f8 01       	movw	r30, r16
 284:	80 81       	ld	r24, Z
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	80 97       	sbiw	r24, 0x20	; 32
 28a:	9c 01       	movw	r18, r24
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	f9 01       	movw	r30, r18
 296:	e8 0f       	add	r30, r24
 298:	f9 1f       	adc	r31, r25
 29a:	e0 5a       	subi	r30, 0xA0	; 160
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	2d 81       	ldd	r18, Y+5	; 0x05
 2a0:	3e 81       	ldd	r19, Y+6	; 0x06
 2a2:	e2 0f       	add	r30, r18
 2a4:	f3 1f       	adc	r31, r19
 2a6:	80 81       	ld	r24, Z
 2a8:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z9GLCD_Datac>
				if((Y_address+1)%64==0)
 2ac:	3f ef       	ldi	r19, 0xFF	; 255
 2ae:	c3 1a       	sub	r12, r19
 2b0:	d3 0a       	sbc	r13, r19
 2b2:	c6 01       	movw	r24, r12
 2b4:	8f 73       	andi	r24, 0x3F	; 63
 2b6:	99 27       	eor	r25, r25
 2b8:	89 2b       	or	r24, r25
 2ba:	39 f5       	brne	.+78     	; 0x30a <_Z11GLCD_StringcPc+0x1dc>
				{
					Command_Port ^= (1 << CS1);
 2bc:	85 b3       	in	r24, 0x15	; 21
 2be:	48 e0       	ldi	r20, 0x08	; 8
 2c0:	84 27       	eor	r24, r20
 2c2:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 2c4:	85 b3       	in	r24, 0x15	; 21
 2c6:	50 e1       	ldi	r21, 0x10	; 16
 2c8:	85 27       	eor	r24, r21
 2ca:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));
 2cc:	69 81       	ldd	r22, Y+1	; 0x01
 2ce:	7a 81       	ldd	r23, Y+2	; 0x02
 2d0:	8b 81       	ldd	r24, Y+3	; 0x03
 2d2:	9c 81       	ldd	r25, Y+4	; 0x04
 2d4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__floatunsisf>
 2d8:	26 2d       	mov	r18, r6
 2da:	35 2d       	mov	r19, r5
 2dc:	44 2d       	mov	r20, r4
 2de:	57 2d       	mov	r21, r7
 2e0:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3>
 2e4:	0e 94 b7 02 	call	0x56e	; 0x56e <__fixunssfsi>
 2e8:	86 2f       	mov	r24, r22
 2ea:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
					Page_inc = Page_inc + 0.5;
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	5f e3       	ldi	r21, 0x3F	; 63
 2f6:	66 2d       	mov	r22, r6
 2f8:	75 2d       	mov	r23, r5
 2fa:	84 2d       	mov	r24, r4
 2fc:	97 2d       	mov	r25, r7
 2fe:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3>
 302:	66 2e       	mov	r6, r22
 304:	57 2e       	mov	r5, r23
 306:	48 2e       	mov	r4, r24
 308:	79 2e       	mov	r7, r25
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
 30a:	8d 81       	ldd	r24, Y+5	; 0x05
 30c:	9e 81       	ldd	r25, Y+6	; 0x06
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	9e 83       	std	Y+6, r25	; 0x06
 312:	8d 83       	std	Y+5, r24	; 0x05
 314:	05 97       	sbiw	r24, 0x05	; 5
 316:	09 f0       	breq	.+2      	; 0x31a <_Z11GLCD_StringcPc+0x1ec>
 318:	b4 cf       	rjmp	.-152    	; 0x282 <_Z11GLCD_StringcPc+0x154>
 31a:	95 e0       	ldi	r25, 0x05	; 5
 31c:	e9 0e       	add	r14, r25
 31e:	f1 1c       	adc	r15, r1
 320:	81 c0       	rjmp	.+258    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 322:	67 01       	movw	r12, r14
 324:	1e 82       	std	Y+6, r1	; 0x06
 326:	1d 82       	std	Y+5, r1	; 0x05
		}
		else
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
 328:	f8 01       	movw	r30, r16
 32a:	80 81       	ld	r24, Z
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	80 97       	sbiw	r24, 0x20	; 32
 330:	9c 01       	movw	r18, r24
 332:	22 0f       	add	r18, r18
 334:	33 1f       	adc	r19, r19
 336:	22 0f       	add	r18, r18
 338:	33 1f       	adc	r19, r19
 33a:	f9 01       	movw	r30, r18
 33c:	e8 0f       	add	r30, r24
 33e:	f9 1f       	adc	r31, r25
 340:	e0 5a       	subi	r30, 0xA0	; 160
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	2d 81       	ldd	r18, Y+5	; 0x05
 346:	3e 81       	ldd	r19, Y+6	; 0x06
 348:	e2 0f       	add	r30, r18
 34a:	f3 1f       	adc	r31, r19
 34c:	80 81       	ld	r24, Z
 34e:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z9GLCD_Datac>
				if((Y_address+1)%64==0)
 352:	3f ef       	ldi	r19, 0xFF	; 255
 354:	c3 1a       	sub	r12, r19
 356:	d3 0a       	sbc	r13, r19
 358:	c6 01       	movw	r24, r12
 35a:	8f 73       	andi	r24, 0x3F	; 63
 35c:	99 27       	eor	r25, r25
 35e:	89 2b       	or	r24, r25
 360:	39 f5       	brne	.+78     	; 0x3b0 <_Z11GLCD_StringcPc+0x282>
				{
					Command_Port ^= (1 << CS1);
 362:	85 b3       	in	r24, 0x15	; 21
 364:	48 e0       	ldi	r20, 0x08	; 8
 366:	84 27       	eor	r24, r20
 368:	85 bb       	out	0x15, r24	; 21
					Command_Port ^= (1 << CS2);
 36a:	85 b3       	in	r24, 0x15	; 21
 36c:	50 e1       	ldi	r21, 0x10	; 16
 36e:	85 27       	eor	r24, r21
 370:	85 bb       	out	0x15, r24	; 21
					GLCD_Command((Page+Page_inc));
 372:	69 81       	ldd	r22, Y+1	; 0x01
 374:	7a 81       	ldd	r23, Y+2	; 0x02
 376:	8b 81       	ldd	r24, Y+3	; 0x03
 378:	9c 81       	ldd	r25, Y+4	; 0x04
 37a:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__floatunsisf>
 37e:	26 2d       	mov	r18, r6
 380:	35 2d       	mov	r19, r5
 382:	44 2d       	mov	r20, r4
 384:	57 2d       	mov	r21, r7
 386:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3>
 38a:	0e 94 b7 02 	call	0x56e	; 0x56e <__fixunssfsi>
 38e:	86 2f       	mov	r24, r22
 390:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
					Page_inc = Page_inc + 0.5;
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	5f e3       	ldi	r21, 0x3F	; 63
 39c:	66 2d       	mov	r22, r6
 39e:	75 2d       	mov	r23, r5
 3a0:	84 2d       	mov	r24, r4
 3a2:	97 2d       	mov	r25, r7
 3a4:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3>
 3a8:	66 2e       	mov	r6, r22
 3aa:	57 2e       	mov	r5, r23
 3ac:	48 2e       	mov	r4, r24
 3ae:	79 2e       	mov	r7, r25
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
 3b0:	8d 81       	ldd	r24, Y+5	; 0x05
 3b2:	9e 81       	ldd	r25, Y+6	; 0x06
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	9e 83       	std	Y+6, r25	; 0x06
 3b8:	8d 83       	std	Y+5, r24	; 0x05
 3ba:	05 97       	sbiw	r24, 0x05	; 5
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <_Z11GLCD_StringcPc+0x292>
 3be:	b4 cf       	rjmp	.-152    	; 0x328 <_Z11GLCD_StringcPc+0x1fa>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z9GLCD_Datac>
			Y_address++;
 3c6:	96 e0       	ldi	r25, 0x06	; 6
 3c8:	e9 0e       	add	r14, r25
 3ca:	f1 1c       	adc	r15, r1
			if((Y_address)%64 == 0)
 3cc:	c7 01       	movw	r24, r14
 3ce:	8f 73       	andi	r24, 0x3F	; 63
 3d0:	99 27       	eor	r25, r25
 3d2:	89 2b       	or	r24, r25
 3d4:	39 f5       	brne	.+78     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			{
				Command_Port ^= (1 << CS1);
 3d6:	85 b3       	in	r24, 0x15	; 21
 3d8:	e8 e0       	ldi	r30, 0x08	; 8
 3da:	8e 27       	eor	r24, r30
 3dc:	85 bb       	out	0x15, r24	; 21
				Command_Port ^= (1 << CS2);
 3de:	85 b3       	in	r24, 0x15	; 21
 3e0:	f0 e1       	ldi	r31, 0x10	; 16
 3e2:	8f 27       	eor	r24, r31
 3e4:	85 bb       	out	0x15, r24	; 21
				GLCD_Command((Page+Page_inc));
 3e6:	69 81       	ldd	r22, Y+1	; 0x01
 3e8:	7a 81       	ldd	r23, Y+2	; 0x02
 3ea:	8b 81       	ldd	r24, Y+3	; 0x03
 3ec:	9c 81       	ldd	r25, Y+4	; 0x04
 3ee:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__floatunsisf>
 3f2:	26 2d       	mov	r18, r6
 3f4:	35 2d       	mov	r19, r5
 3f6:	44 2d       	mov	r20, r4
 3f8:	57 2d       	mov	r21, r7
 3fa:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3>
 3fe:	0e 94 b7 02 	call	0x56e	; 0x56e <__fixunssfsi>
 402:	86 2f       	mov	r24, r22
 404:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
				Page_inc = Page_inc + 0.5;
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	5f e3       	ldi	r21, 0x3F	; 63
 410:	66 2d       	mov	r22, r6
 412:	75 2d       	mov	r23, r5
 414:	84 2d       	mov	r24, r4
 416:	97 2d       	mov	r25, r7
 418:	0e 94 44 02 	call	0x488	; 0x488 <__addsf3>
 41c:	66 2e       	mov	r6, r22
 41e:	57 2e       	mov	r5, r23
 420:	48 2e       	mov	r4, r24
 422:	79 2e       	mov	r7, r25
	
	Command_Port |= (1 << CS1);	
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	
 424:	0f 5f       	subi	r16, 0xFF	; 255
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	f8 01       	movw	r30, r16
 42a:	90 81       	ld	r25, Z
 42c:	91 11       	cpse	r25, r1
 42e:	c7 ce       	rjmp	.-626    	; 0x1be <_Z11GLCD_StringcPc+0x90>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);
 430:	80 e4       	ldi	r24, 0x40	; 64
 432:	0e 94 41 00 	call	0x82	; 0x82 <_Z12GLCD_Commandc>
}
 436:	26 96       	adiw	r28, 0x06	; 6
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	bf 90       	pop	r11
 454:	af 90       	pop	r10
 456:	9f 90       	pop	r9
 458:	8f 90       	pop	r8
 45a:	7f 90       	pop	r7
 45c:	6f 90       	pop	r6
 45e:	5f 90       	pop	r5
 460:	4f 90       	pop	r4
 462:	3f 90       	pop	r3
 464:	2f 90       	pop	r2
 466:	08 95       	ret

00000468 <main>:

int main(void)
{
	GLCD_Init();		
 468:	0e 94 5d 00 	call	0xba	; 0xba <_Z9GLCD_Initv>
	GLCD_ClearAll();	
 46c:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z13GLCD_ClearAllv>
	GLCD_String(0,"12345678");
 470:	60 e4       	ldi	r22, 0x40	; 64
 472:	72 e0       	ldi	r23, 0x02	; 2
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	0e 94 97 00 	call	0x12e	; 0x12e <_Z11GLCD_StringcPc>
	GLCD_String(1,"ADCDEFG");
 47a:	69 e4       	ldi	r22, 0x49	; 73
 47c:	72 e0       	ldi	r23, 0x02	; 2
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0e 94 97 00 	call	0x12e	; 0x12e <_Z11GLCD_StringcPc>
 484:	ff cf       	rjmp	.-2      	; 0x484 <main+0x1c>

00000486 <__subsf3>:
 486:	50 58       	subi	r21, 0x80	; 128

00000488 <__addsf3>:
 488:	bb 27       	eor	r27, r27
 48a:	aa 27       	eor	r26, r26
 48c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__addsf3x>
 490:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_round>
 494:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_pscA>
 498:	38 f0       	brcs	.+14     	; 0x4a8 <__addsf3+0x20>
 49a:	0e 94 33 03 	call	0x666	; 0x666 <__fp_pscB>
 49e:	20 f0       	brcs	.+8      	; 0x4a8 <__addsf3+0x20>
 4a0:	39 f4       	brne	.+14     	; 0x4b0 <__addsf3+0x28>
 4a2:	9f 3f       	cpi	r25, 0xFF	; 255
 4a4:	19 f4       	brne	.+6      	; 0x4ac <__addsf3+0x24>
 4a6:	26 f4       	brtc	.+8      	; 0x4b0 <__addsf3+0x28>
 4a8:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_nan>
 4ac:	0e f4       	brtc	.+2      	; 0x4b0 <__addsf3+0x28>
 4ae:	e0 95       	com	r30
 4b0:	e7 fb       	bst	r30, 7
 4b2:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_inf>

000004b6 <__addsf3x>:
 4b6:	e9 2f       	mov	r30, r25
 4b8:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_split3>
 4bc:	58 f3       	brcs	.-42     	; 0x494 <__addsf3+0xc>
 4be:	ba 17       	cp	r27, r26
 4c0:	62 07       	cpc	r22, r18
 4c2:	73 07       	cpc	r23, r19
 4c4:	84 07       	cpc	r24, r20
 4c6:	95 07       	cpc	r25, r21
 4c8:	20 f0       	brcs	.+8      	; 0x4d2 <__addsf3x+0x1c>
 4ca:	79 f4       	brne	.+30     	; 0x4ea <__addsf3x+0x34>
 4cc:	a6 f5       	brtc	.+104    	; 0x536 <__addsf3x+0x80>
 4ce:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_zero>
 4d2:	0e f4       	brtc	.+2      	; 0x4d6 <__addsf3x+0x20>
 4d4:	e0 95       	com	r30
 4d6:	0b 2e       	mov	r0, r27
 4d8:	ba 2f       	mov	r27, r26
 4da:	a0 2d       	mov	r26, r0
 4dc:	0b 01       	movw	r0, r22
 4de:	b9 01       	movw	r22, r18
 4e0:	90 01       	movw	r18, r0
 4e2:	0c 01       	movw	r0, r24
 4e4:	ca 01       	movw	r24, r20
 4e6:	a0 01       	movw	r20, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	ff 27       	eor	r31, r31
 4ec:	59 1b       	sub	r21, r25
 4ee:	99 f0       	breq	.+38     	; 0x516 <__addsf3x+0x60>
 4f0:	59 3f       	cpi	r21, 0xF9	; 249
 4f2:	50 f4       	brcc	.+20     	; 0x508 <__addsf3x+0x52>
 4f4:	50 3e       	cpi	r21, 0xE0	; 224
 4f6:	68 f1       	brcs	.+90     	; 0x552 <__addsf3x+0x9c>
 4f8:	1a 16       	cp	r1, r26
 4fa:	f0 40       	sbci	r31, 0x00	; 0
 4fc:	a2 2f       	mov	r26, r18
 4fe:	23 2f       	mov	r18, r19
 500:	34 2f       	mov	r19, r20
 502:	44 27       	eor	r20, r20
 504:	58 5f       	subi	r21, 0xF8	; 248
 506:	f3 cf       	rjmp	.-26     	; 0x4ee <__addsf3x+0x38>
 508:	46 95       	lsr	r20
 50a:	37 95       	ror	r19
 50c:	27 95       	ror	r18
 50e:	a7 95       	ror	r26
 510:	f0 40       	sbci	r31, 0x00	; 0
 512:	53 95       	inc	r21
 514:	c9 f7       	brne	.-14     	; 0x508 <__addsf3x+0x52>
 516:	7e f4       	brtc	.+30     	; 0x536 <__addsf3x+0x80>
 518:	1f 16       	cp	r1, r31
 51a:	ba 0b       	sbc	r27, r26
 51c:	62 0b       	sbc	r22, r18
 51e:	73 0b       	sbc	r23, r19
 520:	84 0b       	sbc	r24, r20
 522:	ba f0       	brmi	.+46     	; 0x552 <__addsf3x+0x9c>
 524:	91 50       	subi	r25, 0x01	; 1
 526:	a1 f0       	breq	.+40     	; 0x550 <__addsf3x+0x9a>
 528:	ff 0f       	add	r31, r31
 52a:	bb 1f       	adc	r27, r27
 52c:	66 1f       	adc	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	88 1f       	adc	r24, r24
 532:	c2 f7       	brpl	.-16     	; 0x524 <__addsf3x+0x6e>
 534:	0e c0       	rjmp	.+28     	; 0x552 <__addsf3x+0x9c>
 536:	ba 0f       	add	r27, r26
 538:	62 1f       	adc	r22, r18
 53a:	73 1f       	adc	r23, r19
 53c:	84 1f       	adc	r24, r20
 53e:	48 f4       	brcc	.+18     	; 0x552 <__addsf3x+0x9c>
 540:	87 95       	ror	r24
 542:	77 95       	ror	r23
 544:	67 95       	ror	r22
 546:	b7 95       	ror	r27
 548:	f7 95       	ror	r31
 54a:	9e 3f       	cpi	r25, 0xFE	; 254
 54c:	08 f0       	brcs	.+2      	; 0x550 <__addsf3x+0x9a>
 54e:	b0 cf       	rjmp	.-160    	; 0x4b0 <__addsf3+0x28>
 550:	93 95       	inc	r25
 552:	88 0f       	add	r24, r24
 554:	08 f0       	brcs	.+2      	; 0x558 <__addsf3x+0xa2>
 556:	99 27       	eor	r25, r25
 558:	ee 0f       	add	r30, r30
 55a:	97 95       	ror	r25
 55c:	87 95       	ror	r24
 55e:	08 95       	ret

00000560 <__fixsfsi>:
 560:	0e 94 b7 02 	call	0x56e	; 0x56e <__fixunssfsi>
 564:	68 94       	set
 566:	b1 11       	cpse	r27, r1
 568:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>
 56c:	08 95       	ret

0000056e <__fixunssfsi>:
 56e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_splitA>
 572:	88 f0       	brcs	.+34     	; 0x596 <__fixunssfsi+0x28>
 574:	9f 57       	subi	r25, 0x7F	; 127
 576:	98 f0       	brcs	.+38     	; 0x59e <__fixunssfsi+0x30>
 578:	b9 2f       	mov	r27, r25
 57a:	99 27       	eor	r25, r25
 57c:	b7 51       	subi	r27, 0x17	; 23
 57e:	b0 f0       	brcs	.+44     	; 0x5ac <__fixunssfsi+0x3e>
 580:	e1 f0       	breq	.+56     	; 0x5ba <__fixunssfsi+0x4c>
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	88 1f       	adc	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	1a f0       	brmi	.+6      	; 0x592 <__fixunssfsi+0x24>
 58c:	ba 95       	dec	r27
 58e:	c9 f7       	brne	.-14     	; 0x582 <__fixunssfsi+0x14>
 590:	14 c0       	rjmp	.+40     	; 0x5ba <__fixunssfsi+0x4c>
 592:	b1 30       	cpi	r27, 0x01	; 1
 594:	91 f0       	breq	.+36     	; 0x5ba <__fixunssfsi+0x4c>
 596:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_zero>
 59a:	b1 e0       	ldi	r27, 0x01	; 1
 59c:	08 95       	ret
 59e:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_zero>
 5a2:	67 2f       	mov	r22, r23
 5a4:	78 2f       	mov	r23, r24
 5a6:	88 27       	eor	r24, r24
 5a8:	b8 5f       	subi	r27, 0xF8	; 248
 5aa:	39 f0       	breq	.+14     	; 0x5ba <__fixunssfsi+0x4c>
 5ac:	b9 3f       	cpi	r27, 0xF9	; 249
 5ae:	cc f3       	brlt	.-14     	; 0x5a2 <__fixunssfsi+0x34>
 5b0:	86 95       	lsr	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b3 95       	inc	r27
 5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__fixunssfsi+0x42>
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__fixunssfsi+0x5c>
 5bc:	90 95       	com	r25
 5be:	80 95       	com	r24
 5c0:	70 95       	com	r23
 5c2:	61 95       	neg	r22
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	08 95       	ret

000005cc <__floatunsisf>:
 5cc:	e8 94       	clt
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <__floatsisf+0x12>

000005d0 <__floatsisf>:
 5d0:	97 fb       	bst	r25, 7
 5d2:	3e f4       	brtc	.+14     	; 0x5e2 <__floatsisf+0x12>
 5d4:	90 95       	com	r25
 5d6:	80 95       	com	r24
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	99 23       	and	r25, r25
 5e4:	a9 f0       	breq	.+42     	; 0x610 <__floatsisf+0x40>
 5e6:	f9 2f       	mov	r31, r25
 5e8:	96 e9       	ldi	r25, 0x96	; 150
 5ea:	bb 27       	eor	r27, r27
 5ec:	93 95       	inc	r25
 5ee:	f6 95       	lsr	r31
 5f0:	87 95       	ror	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b7 95       	ror	r27
 5f8:	f1 11       	cpse	r31, r1
 5fa:	f8 cf       	rjmp	.-16     	; 0x5ec <__floatsisf+0x1c>
 5fc:	fa f4       	brpl	.+62     	; 0x63c <__floatsisf+0x6c>
 5fe:	bb 0f       	add	r27, r27
 600:	11 f4       	brne	.+4      	; 0x606 <__floatsisf+0x36>
 602:	60 ff       	sbrs	r22, 0
 604:	1b c0       	rjmp	.+54     	; 0x63c <__floatsisf+0x6c>
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	16 c0       	rjmp	.+44     	; 0x63c <__floatsisf+0x6c>
 610:	88 23       	and	r24, r24
 612:	11 f0       	breq	.+4      	; 0x618 <__floatsisf+0x48>
 614:	96 e9       	ldi	r25, 0x96	; 150
 616:	11 c0       	rjmp	.+34     	; 0x63a <__floatsisf+0x6a>
 618:	77 23       	and	r23, r23
 61a:	21 f0       	breq	.+8      	; 0x624 <__floatsisf+0x54>
 61c:	9e e8       	ldi	r25, 0x8E	; 142
 61e:	87 2f       	mov	r24, r23
 620:	76 2f       	mov	r23, r22
 622:	05 c0       	rjmp	.+10     	; 0x62e <__floatsisf+0x5e>
 624:	66 23       	and	r22, r22
 626:	71 f0       	breq	.+28     	; 0x644 <__floatsisf+0x74>
 628:	96 e8       	ldi	r25, 0x86	; 134
 62a:	86 2f       	mov	r24, r22
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	2a f0       	brmi	.+10     	; 0x63c <__floatsisf+0x6c>
 632:	9a 95       	dec	r25
 634:	66 0f       	add	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	da f7       	brpl	.-10     	; 0x632 <__floatsisf+0x62>
 63c:	88 0f       	add	r24, r24
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <__fp_inf>:
 646:	97 f9       	bld	r25, 7
 648:	9f 67       	ori	r25, 0x7F	; 127
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	08 95       	ret

00000652 <__fp_nan>:
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	80 ec       	ldi	r24, 0xC0	; 192
 656:	08 95       	ret

00000658 <__fp_pscA>:
 658:	00 24       	eor	r0, r0
 65a:	0a 94       	dec	r0
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	09 06       	cpc	r0, r25
 664:	08 95       	ret

00000666 <__fp_pscB>:
 666:	00 24       	eor	r0, r0
 668:	0a 94       	dec	r0
 66a:	12 16       	cp	r1, r18
 66c:	13 06       	cpc	r1, r19
 66e:	14 06       	cpc	r1, r20
 670:	05 06       	cpc	r0, r21
 672:	08 95       	ret

00000674 <__fp_round>:
 674:	09 2e       	mov	r0, r25
 676:	03 94       	inc	r0
 678:	00 0c       	add	r0, r0
 67a:	11 f4       	brne	.+4      	; 0x680 <__fp_round+0xc>
 67c:	88 23       	and	r24, r24
 67e:	52 f0       	brmi	.+20     	; 0x694 <__fp_round+0x20>
 680:	bb 0f       	add	r27, r27
 682:	40 f4       	brcc	.+16     	; 0x694 <__fp_round+0x20>
 684:	bf 2b       	or	r27, r31
 686:	11 f4       	brne	.+4      	; 0x68c <__fp_round+0x18>
 688:	60 ff       	sbrs	r22, 0
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__fp_round+0x20>
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	08 95       	ret

00000696 <__fp_split3>:
 696:	57 fd       	sbrc	r21, 7
 698:	90 58       	subi	r25, 0x80	; 128
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	59 f0       	breq	.+22     	; 0x6b6 <__fp_splitA+0x10>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	71 f0       	breq	.+28     	; 0x6c0 <__fp_splitA+0x1a>
 6a4:	47 95       	ror	r20

000006a6 <__fp_splitA>:
 6a6:	88 0f       	add	r24, r24
 6a8:	97 fb       	bst	r25, 7
 6aa:	99 1f       	adc	r25, r25
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <__fp_splitA+0x20>
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <__fp_splitA+0x2a>
 6b2:	87 95       	ror	r24
 6b4:	08 95       	ret
 6b6:	12 16       	cp	r1, r18
 6b8:	13 06       	cpc	r1, r19
 6ba:	14 06       	cpc	r1, r20
 6bc:	55 1f       	adc	r21, r21
 6be:	f2 cf       	rjmp	.-28     	; 0x6a4 <__fp_split3+0xe>
 6c0:	46 95       	lsr	r20
 6c2:	f1 df       	rcall	.-30     	; 0x6a6 <__fp_splitA>
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <__fp_splitA+0x30>
 6c6:	16 16       	cp	r1, r22
 6c8:	17 06       	cpc	r1, r23
 6ca:	18 06       	cpc	r1, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	f1 cf       	rjmp	.-30     	; 0x6b2 <__fp_splitA+0xc>
 6d0:	86 95       	lsr	r24
 6d2:	71 05       	cpc	r23, r1
 6d4:	61 05       	cpc	r22, r1
 6d6:	08 94       	sec
 6d8:	08 95       	ret

000006da <__fp_zero>:
 6da:	e8 94       	clt

000006dc <__fp_szero>:
 6dc:	bb 27       	eor	r27, r27
 6de:	66 27       	eor	r22, r22
 6e0:	77 27       	eor	r23, r23
 6e2:	cb 01       	movw	r24, r22
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
