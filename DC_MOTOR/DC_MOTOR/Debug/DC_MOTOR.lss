
DC_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ce  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000630  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z8ADC_Initv>:

volatile uint8_t Direction = 0;

void ADC_Init()			
{
	DDRA = 0x00;		
  7c:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			
  7e:	87 e8       	ldi	r24, 0x87	; 135
  80:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
  86:	08 95       	ret

00000088 <_Z8ADC_Readc>:
}

int ADC_Read(char channel)		        
{
	ADMUX = 0x40 | (channel & 0x07);   
  88:	87 70       	andi	r24, 0x07	; 7
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);		     
  8e:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1<<ADIF)));	    
  90:	34 9b       	sbis	0x06, 4	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <_Z8ADC_Readc+0x8>
	ADCSRA |= (1<<ADIF);		         
  94:	34 9a       	sbi	0x06, 4	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8f ec       	ldi	r24, 0xCF	; 207
  98:	97 e0       	ldi	r25, 0x07	; 7
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <_Z8ADC_Readc+0x12>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_Z8ADC_Readc+0x18>
  a0:	00 00       	nop
	_delay_ms(1);			     
	return ADCW;			
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	95 b1       	in	r25, 0x05	; 5
}
  a6:	08 95       	ret

000000a8 <main>:



int main(void)
{
	DDRC = 0xFF;						/* Chon PORTC Output */
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	
	DDRB |= (1<<PB3);					/* Make OC0 pin as Output */
  ac:	bb 9a       	sbi	0x17, 3	; 23
	
	

	ADC_Init();			/* Khai bao ADC */
  ae:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z8ADC_Initv>
	TCNT0 = 0;			/* Su dung Timer0 */
  b2:	12 be       	out	0x32, r1	; 50
	TCCR0 = (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00)|(1<<CS01);/* Set Fast PWM with Fosc/64 Timer0 clock */
  b4:	8b e6       	ldi	r24, 0x6B	; 107
  b6:	83 bf       	out	0x33, r24	; 51
	while(1)
	{
		PORTC = 1;
  b8:	c1 e0       	ldi	r28, 0x01	; 1
  ba:	c5 bb       	out	0x15, r28	; 21
		OCR0 = (ADC_Read(0)/4);			/* Doc hia tri ADC 0- 255, dieu khien toc do DC */
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 44 00 	call	0x88	; 0x88 <_Z8ADC_Readc>
  c2:	99 23       	and	r25, r25
  c4:	0c f4       	brge	.+2      	; 0xc8 <main+0x20>
  c6:	03 96       	adiw	r24, 0x03	; 3
  c8:	95 95       	asr	r25
  ca:	87 95       	ror	r24
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	8c bf       	out	0x3c, r24	; 60
  d2:	f3 cf       	rjmp	.-26     	; 0xba <main+0x12>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
